{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"120kYYBOVa1i0TD85RjlEkFjaWDxSFUx3","timestamp":1668841960708},{"file_id":"1YbT61SuuIc2mcYWH7KA_Gv49EN3M8VE4","timestamp":1611090576605},{"file_id":"1gJGl7J18aP9jR5_2gjwQOcn8RWZegUR6","timestamp":1603207633254}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"db075f0871564f5da3119833dcffbf17":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.4.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.4.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_1f4487629d4646459e9923bea2461cf3","IPY_MODEL_d1b99c321d8b4256bc9c4267fbafa224","IPY_MODEL_dded254d850e4f86a778aa73439ebc48"],"layout":"IPY_MODEL_488efe83bb0c4675a8f7f6c88b2796d6"},"model_module_version":"1.4.0"},"1f4487629d4646459e9923bea2461cf3":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.4.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.4.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_4c463140b56245d98996048fd4c78b22","placeholder":"​","style":"IPY_MODEL_42bd42a903de4d3f8c7f741fc99695d5","value":"Average bits/dim: 4.111211:   1%"},"model_module_version":"1.4.0"},"d1b99c321d8b4256bc9c4267fbafa224":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.4.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.4.0","_view_name":"ProgressView","bar_style":"danger","description":"","description_tooltip":null,"layout":"IPY_MODEL_32c4f6132fca4c6797b317db5bd35938","max":313,"min":0,"orientation":"horizontal","style":"IPY_MODEL_9fe9af58fc544fce975120a09e8cc329","value":2},"model_module_version":"1.4.0"},"dded254d850e4f86a778aa73439ebc48":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.4.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.4.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b41078ed64a24f68a69f821fc32791ad","placeholder":"​","style":"IPY_MODEL_7d060cf0423f48d09b5ad434e8254ec2","value":" 2/313 [00:19&lt;50:11,  9.68s/it]"},"model_module_version":"1.4.0"},"488efe83bb0c4675a8f7f6c88b2796d6":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.1.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.1.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null},"model_module_version":"1.1.0"},"4c463140b56245d98996048fd4c78b22":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.1.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.1.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null},"model_module_version":"1.1.0"},"42bd42a903de4d3f8c7f741fc99695d5":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.4.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.1.0","_view_name":"StyleView","description_width":""},"model_module_version":"1.4.0"},"32c4f6132fca4c6797b317db5bd35938":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.1.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.1.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null},"model_module_version":"1.1.0"},"9fe9af58fc544fce975120a09e8cc329":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.4.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.1.0","_view_name":"StyleView","bar_color":null,"description_width":""},"model_module_version":"1.4.0"},"b41078ed64a24f68a69f821fc32791ad":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.1.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.1.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null},"model_module_version":"1.1.0"},"7d060cf0423f48d09b5ad434e8254ec2":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.4.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.1.0","_view_name":"StyleView","description_width":""},"model_module_version":"1.4.0"},"30a674589e9543e59b96fac197a84f81":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_7e37cc2e3a774698bc0d9305c06a388b","IPY_MODEL_56ac7221b34547778224a6f17cdedfaf","IPY_MODEL_588912f54a0a41f185e9969481a3b28c"],"layout":"IPY_MODEL_3d43c818b4494aba802a5544b2fdaea7"}},"7e37cc2e3a774698bc0d9305c06a388b":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_a3828b965fed4f6aa0a72ddb2b971938","placeholder":"​","style":"IPY_MODEL_f8a55b778d0a4b5890618d03beb0d6aa","value":"100%"}},"56ac7221b34547778224a6f17cdedfaf":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_821573885ad04dc2a79935b727944d98","max":9912422,"min":0,"orientation":"horizontal","style":"IPY_MODEL_198a1756a1fd4b1e9ec1a8e43df23625","value":9912422}},"588912f54a0a41f185e9969481a3b28c":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_0ce2ac466e954e299373e5af15045e29","placeholder":"​","style":"IPY_MODEL_b12d763ed27b40d3b8ef20714e4b522d","value":" 9912422/9912422 [00:00&lt;00:00, 11459939.68it/s]"}},"3d43c818b4494aba802a5544b2fdaea7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a3828b965fed4f6aa0a72ddb2b971938":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f8a55b778d0a4b5890618d03beb0d6aa":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"821573885ad04dc2a79935b727944d98":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"198a1756a1fd4b1e9ec1a8e43df23625":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"0ce2ac466e954e299373e5af15045e29":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b12d763ed27b40d3b8ef20714e4b522d":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"75578127ba6741798e065c0d5c42bc4f":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_44da05c5ace44a5b869c163d72a99093","IPY_MODEL_673c1c109fca492cbaf5429478b622ef","IPY_MODEL_d1e7d84d00a4454b9f58348ba582b0e7"],"layout":"IPY_MODEL_de8dea285745430ab12532d32f434e9f"}},"44da05c5ace44a5b869c163d72a99093":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b5335a481a164696acc2a5a5b157d787","placeholder":"​","style":"IPY_MODEL_8845c6e7ec3b495a8ede33ea74ef0e3e","value":"100%"}},"673c1c109fca492cbaf5429478b622ef":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_c75e4c0f6f8c4a0393b40879a5ad504b","max":28881,"min":0,"orientation":"horizontal","style":"IPY_MODEL_4e4641f5bd854c26b844f615ee64954d","value":28881}},"d1e7d84d00a4454b9f58348ba582b0e7":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_e7efd36ed00a49538934a4b944ceed8b","placeholder":"​","style":"IPY_MODEL_e3770c25098346469051beca713620c0","value":" 28881/28881 [00:00&lt;00:00, 888417.26it/s]"}},"de8dea285745430ab12532d32f434e9f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b5335a481a164696acc2a5a5b157d787":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8845c6e7ec3b495a8ede33ea74ef0e3e":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"c75e4c0f6f8c4a0393b40879a5ad504b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4e4641f5bd854c26b844f615ee64954d":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"e7efd36ed00a49538934a4b944ceed8b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e3770c25098346469051beca713620c0":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"a357ccbed4144be7b663bc8472ccd6e2":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_b7554177735b462987b94b6d49c2944f","IPY_MODEL_66b658c8db5a473bac4be3498cf1b8b2","IPY_MODEL_8c2694caa46d454f9de048a8be2b707e"],"layout":"IPY_MODEL_61835cdf921f4a8286dfc0b425eef824"}},"b7554177735b462987b94b6d49c2944f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_2ab2f88453a34b5a9bd1cf3792b0ca75","placeholder":"​","style":"IPY_MODEL_f7bdd16faf0f4f009609c309d803c2d6","value":"100%"}},"66b658c8db5a473bac4be3498cf1b8b2":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_6bc8f24716f54866a8690e5a18a616d2","max":1648877,"min":0,"orientation":"horizontal","style":"IPY_MODEL_c0474f24c1814d46a983ca75280426c0","value":1648877}},"8c2694caa46d454f9de048a8be2b707e":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_c3234c0b8c31415d86abad81943a0831","placeholder":"​","style":"IPY_MODEL_e3118a26e0614cfb92101038c838df8b","value":" 1648877/1648877 [00:00&lt;00:00, 25699984.01it/s]"}},"61835cdf921f4a8286dfc0b425eef824":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2ab2f88453a34b5a9bd1cf3792b0ca75":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f7bdd16faf0f4f009609c309d803c2d6":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"6bc8f24716f54866a8690e5a18a616d2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c0474f24c1814d46a983ca75280426c0":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"c3234c0b8c31415d86abad81943a0831":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e3118a26e0614cfb92101038c838df8b":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"53e82774842845918b16cc3949c281ac":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_325430e33fab460b8d36a9fe3946ce9d","IPY_MODEL_1a150b4704704c6c892a4f8c5fb8cc97","IPY_MODEL_59e95319ef6d40b186700eba5026655c"],"layout":"IPY_MODEL_dd32dd48a5d444419ded771143ca10fd"}},"325430e33fab460b8d36a9fe3946ce9d":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b399140cccb1487484a7f386f9c32675","placeholder":"​","style":"IPY_MODEL_8d333b2db6cb4c9f9c552bd37d1b5a19","value":"100%"}},"1a150b4704704c6c892a4f8c5fb8cc97":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_8a6ab7b29da84840b422b687ba976d64","max":4542,"min":0,"orientation":"horizontal","style":"IPY_MODEL_94a41746a42b4bfe88f60eacac62f69e","value":4542}},"59e95319ef6d40b186700eba5026655c":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_65ff71a1e2124057a1e4776b689dc5de","placeholder":"​","style":"IPY_MODEL_f3b853d2f86140dba4fa0d33eea84db5","value":" 4542/4542 [00:00&lt;00:00, 99702.36it/s]"}},"dd32dd48a5d444419ded771143ca10fd":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b399140cccb1487484a7f386f9c32675":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8d333b2db6cb4c9f9c552bd37d1b5a19":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"8a6ab7b29da84840b422b687ba976d64":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"94a41746a42b4bfe88f60eacac62f69e":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"65ff71a1e2124057a1e4776b689dc5de":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f3b853d2f86140dba4fa0d33eea84db5":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ce881d5ab8c4432b9cbf0c0ff0f64260":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_7e9aee1913124c31a01a4736152c0c69","IPY_MODEL_894ece4e089c470d9386d2119183eef1","IPY_MODEL_1c0f4fa5b7834a018c8dd702e17fd1d9"],"layout":"IPY_MODEL_5fe2d038a7b247aea8c4726f7bebdf0f"}},"7e9aee1913124c31a01a4736152c0c69":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_d358a482032d415a8aa22eee6e635621","placeholder":"​","style":"IPY_MODEL_cd14efd07dc149dcbe129fae66ec019d","value":"Average Loss: 17.108918: 100%"}},"894ece4e089c470d9386d2119183eef1":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_00dacc6cd9b24ce79468a144631276bf","max":50,"min":0,"orientation":"horizontal","style":"IPY_MODEL_fb751efad42943769261ed8fa4737144","value":50}},"1c0f4fa5b7834a018c8dd702e17fd1d9":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_41b85f8a4f1d4400a26dfae1755bf5af","placeholder":"​","style":"IPY_MODEL_4f115af7d7244c5db72d3e6a017852ef","value":" 50/50 [27:55&lt;00:00, 34.79s/it]"}},"5fe2d038a7b247aea8c4726f7bebdf0f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d358a482032d415a8aa22eee6e635621":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"cd14efd07dc149dcbe129fae66ec019d":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"00dacc6cd9b24ce79468a144631276bf":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"fb751efad42943769261ed8fa4737144":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"41b85f8a4f1d4400a26dfae1755bf5af":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4f115af7d7244c5db72d3e6a017852ef":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"2263bacf9bd1488d9378993875604f51":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_55fa2bd3482a4b2e8653ff43b96dc4a6","IPY_MODEL_93082464df834c60b36b9408f1d9f9ad","IPY_MODEL_e548b027f001406ea5ef750772cc7749"],"layout":"IPY_MODEL_52284bb8d085477ebed699305aacd6fc"}},"55fa2bd3482a4b2e8653ff43b96dc4a6":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_f676600c35f6446da3b0f713ebf412f9","placeholder":"​","style":"IPY_MODEL_f500fa5a93e84e15963018b125a47309","value":"100%"}},"93082464df834c60b36b9408f1d9f9ad":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_e0020383c8c34f3987725dbc3026e820","max":500,"min":0,"orientation":"horizontal","style":"IPY_MODEL_10d6da865b20466d9cc1658b876ac47b","value":500}},"e548b027f001406ea5ef750772cc7749":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_7abc605abaff4a42bed5a1a04c801c50","placeholder":"​","style":"IPY_MODEL_e92ff81a5b45484aa26294957600848b","value":" 500/500 [00:05&lt;00:00, 100.92it/s]"}},"52284bb8d085477ebed699305aacd6fc":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f676600c35f6446da3b0f713ebf412f9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f500fa5a93e84e15963018b125a47309":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"e0020383c8c34f3987725dbc3026e820":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"10d6da865b20466d9cc1658b876ac47b":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"7abc605abaff4a42bed5a1a04c801c50":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e92ff81a5b45484aa26294957600848b":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"21v75FhSkfCq"},"source":["# Score-Based Generative Modeling\n","\n","\n","### Goals\n","This is a hitchhiker's guide to score-based generative models, a family of approaches based on [estimating gradients of the data distribution](https://arxiv.org/abs/1907.05600). They have obtained high-quality samples comparable to GANs (like below, figure from [this paper](https://arxiv.org/abs/2006.09011)) without requiring adversarial training, and are considered by some to be [the new contender to GANs](https://ajolicoeur.wordpress.com/the-new-contender-to-gans-score-matching-with-langevin-sampling/).\n","\n","![ncsnv2](https://github.com/ermongroup/ncsnv2/blob/master/assets/samples.jpg?raw=true)\n","\n","The contents of this notebook are mainly based on the following paper: \n","\n","Yang Song, Jascha Sohl-Dickstein, Diederik P. Kingma, Abhishek Kumar, Stefano Ermon, and Ben Poole. \"[Score-Based Generative Modeling through Stochastic Differential Equations.](https://arxiv.org/pdf/2011.13456.pdf)\" Internation Conference on Learning Representations, 2021"]},{"cell_type":"markdown","metadata":{"id":"XCR6m0HjWGVV"},"source":["## Introduction\n","\n","### Score and Score-Based Models\n","Given a probablity density function $p(\\mathbf{x})$, we define the *score* as $$\\nabla_\\mathbf{x} \\log p(\\mathbf{x}).$$ As you might guess, score-based generative models are trained to estimate $\\nabla_\\mathbf{x} \\log p(\\mathbf{x})$. Unlike likelihood-based models such as flow models or autoregressive models, score-based models do not have to be normalized and are easier to parameterize. For example, consider a non-normalized statistical model $p_\\theta(\\mathbf{x}) = \\frac{e^{-E_\\theta(\\mathbf{x})}}{Z_\\theta}$, where $E_\\theta(\\mathbf{x}) \\in \\mathbb{R}$ is called the energy function and $Z_\\theta$ is an unknown normalizing constant that makes $p_\\theta(\\mathbf{x})$ a proper probability density function. The energy function is typically parameterized by a flexible neural network. When training it as a likelihood model, we need to know the normalizing constant $Z_\\theta$ by computing complex high-dimensional integrals, which is typically intractable. In constrast, when computing its score, we obtain $\\nabla_\\mathbf{x} \\log p_\\theta(\\mathbf{x}) = -\\nabla_\\mathbf{x} E_\\theta(\\mathbf{x})$ which does not require computing the normalizing constant $Z_\\theta$.\n","\n","In fact, any neural network that maps an input vector $\\mathbf{x} \\in \\mathbb{R}^d$ to an output vector $\\mathbf{y} \\in \\mathbb{R}^d$ can be used as a score-based model, as long as the output and input have the same dimensionality. This yields huge flexibility in choosing model architectures.\n","\n","### Perturbing Data with a Diffusion Process\n","\n","In order to generate samples with score-based models, we need to consider a [diffusion process](https://en.wikipedia.org/wiki/Diffusion_process) that corrupts data slowly into random noise. Scores will arise when we reverse this diffusion process for sample generation. You will see this later in the notebook.\n","\n","A diffusion process is a [stochastic process](https://en.wikipedia.org/wiki/Stochastic_process#:~:text=A%20stochastic%20or%20random%20process%20can%20be%20defined%20as%20a,an%20element%20in%20the%20set.) similar to [Brownian motion](https://en.wikipedia.org/wiki/Brownian_motion). Their paths are like the trajectory of a particle submerged in a flowing fluid, which moves randomly due to unpredictable collisions with other particles. Let $\\{\\mathbf{x}(t) \\in \\mathbb{R}^d \\}_{t=0}^T$ be a diffusion process, indexed by the continuous time variable $t\\in [0,T]$. A diffusion process is governed by a stochastic differential equation (SDE), in the following form\n","\n","\\begin{align*}\n","d \\mathbf{x} = \\mathbf{f}(\\mathbf{x}, t) d t + g(t) d \\mathbf{w},\n","\\end{align*}\n","\n","where $\\mathbf{f}(\\cdot, t): \\mathbb{R}^d \\to \\mathbb{R}^d$ is called the *drift coefficient* of the SDE, $g(t) \\in \\mathbb{R}$ is called the *diffusion coefficient*, and $\\mathbf{w}$ represents the standard Brownian motion. You can understand an SDE as a stochastic generalization to ordinary differential equations (ODEs). Particles moving according to an SDE not only follows the deterministic drift $\\mathbf{f}(\\mathbf{x}, t)$, but are also affected by the random noise coming from $g(t) d\\mathbf{w}$. From now on, we use $p_t(\\mathbf{x})$ to denote the distribution of $\\mathbf{x}(t)$. \n","\n","For score-based generative modeling, we will choose a diffusion process such that $\\mathbf{x}(0) \\sim p_0$, and $\\mathbf{x}(T) \\sim p_T$. Here $p_0$ is the data distribution where we have a dataset of i.i.d. samples, and $p_T$ is the prior distribution that has a tractable form and easy to sample from. The noise perturbation by the diffusion process is large enough to ensure $p_T$ does not depend on $p_0$.\n","\n","### Reversing the Diffusion Process Yields Score-Based Generative Models\n","By starting from a sample from the prior distribution $p_T$ and reversing the diffusion process, we will be able to obtain a sample from the data distribution $p_0$. Crucially, the reverse process is a diffusion process running backwards in time. It is given by the following reverse-time SDE\n","\n","\\begin{align}\n","  d\\mathbf{x} = [\\mathbf{f}(\\mathbf{x}, t) - g^2(t)\\nabla_{\\mathbf{x}}\\log p_t(\\mathbf{x})] dt + g(t) d\\bar{\\mathbf{w}},\n","\\end{align}\n","\n","where $\\bar{\\mathbf{w}}$ is a Brownian motion in the reverse time direction, and $dt$ represents an infinitesimal negative time step. This reverse SDE can be computed once we know the drift and diffusion coefficients of the forward SDE, as well as the score of $p_t(\\mathbf{x})$ for each $t\\in[0, T]$.\n","\n","The overall intuition of score-based generative modeling with SDEs can be summarized in the illustration below\n","\n","![sde schematic](https://drive.google.com/uc?id=1Ptvb790eQRYMHLnDGBeYZK9A2cF-JMEP)\n","\n","\n","### Score Estimation\n","\n","Based on the above intuition, we can use the time-dependent score function $\\nabla_\\mathbf{x} \\log p_t(\\mathbf{x})$ to construct the reverse-time SDE, and then solve it numerically to obtain samples from $p_0$ using samples from a prior distribution $p_T$. We can train a time-dependent score-based model $s_\\theta(\\mathbf{x}, t)$ to approximate $\\nabla_\\mathbf{x} \\log p_t(\\mathbf{x})$, using the following weighted sum of [denoising score matching](http://www.iro.umontreal.ca/~vincentp/Publications/smdae_techreport.pdf) objectives.\n","\n","\\begin{align}\n","\\min_\\theta \\mathbb{E}_{t\\sim \\mathcal{U}(0, T)} [\\lambda(t) \\mathbb{E}_{\\mathbf{x}(0) \\sim p_0(\\mathbf{x})}\\mathbf{E}_{\\mathbf{x}(t) \\sim p_{0t}(\\mathbf{x}(t) \\mid \\mathbf{x}(0))}[ \\|s_\\theta(\\mathbf{x}(t), t) - \\nabla_{\\mathbf{x}(t)}\\log p_{0t}(\\mathbf{x}(t) \\mid \\mathbf{x}(0))\\|_2^2]],\n","\\end{align}\n","where $\\mathcal{U}(0,T)$ is a uniform distribution over $[0, T]$, $p_{0t}(\\mathbf{x}(t) \\mid \\mathbf{x}(0))$ denotes the transition probability from $\\mathbf{x}(0)$ to $\\mathbf{x}(t)$, and $\\lambda(t) \\in \\mathbb{R}_{>0}$ denotes a positive weighting function.\n","\n","In the objective, the expectation over $\\mathbf{x}(0)$ can be estimated with empirical means over data samples from $p_0$. The expectation over $\\mathbf{x}(t)$ can be estimated by sampling from $p_{0t}(\\mathbf{x}(t) \\mid \\mathbf{x}(0))$, which is efficient when the drift coefficient $\\mathbf{f}(\\mathbf{x}, t)$ is affine. The weight function $\\lambda(t)$ is typically chosen to be inverse proportional to $\\mathbb{E}[\\|\\nabla_{\\mathbf{x}}\\log p_{0t}(\\mathbf{x}(t) \\mid \\mathbf{x}(0)) \\|_2^2]$.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"GFuMaPov5HlV"},"source":["### Time-Dependent Score-Based Model\n","\n","There are no restrictions on the network architecture of time-dependent score-based models, except that their output should have the same dimensionality as the input, and they should be conditioned on time.\n","\n","Several useful tips on architecture choice:\n","* It usually performs well to use the [U-net](https://arxiv.org/abs/1505.04597) architecture as the backbone of the score network $s_\\theta(\\mathbf{x}, t)$,\n","\n","* We can incorporate the time information via [Gaussian random features](https://arxiv.org/abs/2006.10739). Specifically, we first sample $\\omega \\sim \\mathcal{N}(\\mathbf{0}, s^2\\mathbf{I})$ which is subsequently fixed for the model (i.e., not learnable). For a time step $t$, the corresponding Gaussian random feature is defined as \n","\\begin{align}\n","  [\\sin(2\\pi \\omega t) ; \\cos(2\\pi \\omega t)],\n","\\end{align}\n","where $[\\vec{a} ; \\vec{b}]$ denotes the concatenation of vector $\\vec{a}$ and $\\vec{b}$. This Gaussian random feature can be used as an encoding for time step $t$ so that the score network can condition on $t$ by incorporating this encoding. We will see this further in the code.\n","\n","* We can rescale the output of the U-net by $1/\\sqrt{\\mathbb{E}[\\|\\nabla_{\\mathbf{x}}\\log p_{0t}(\\mathbf{x}(t) \\mid \\mathbf{x}(0)) \\|_2^2]}$. This is because the optimal $s_\\theta(\\mathbf{x}(t), t)$ has an $\\ell_2$-norm close to $\\mathbb{E}[\\|\\nabla_{\\mathbf{x}}\\log p_{0t}(\\mathbf{x}(t) \\mid \\mathbf{x}(0))]\\|_2$, and the rescaling helps capture the norm of the true score. Recall that the training objective contains sums of the form\n","\\begin{align*}\n","\\mathbf{E}_{\\mathbf{x}(t) \\sim p_{0t}(\\mathbf{x}(t) \\mid \\mathbf{x}(0))}[ \\|s_\\theta(\\mathbf{x}(t), t) - \\nabla_{\\mathbf{x}(t)}\\log p_{0t}(\\mathbf{x}(t) \\mid \\mathbf{x}(0))\\|_2^2].\n","\\end{align*}\n","Therefore, it is natural to expect that the optimal score model $s_\\theta(\\mathbf{x}, t) \\approx \\nabla_{\\mathbf{x}(t)} \\log p_{0t}(\\mathbf{x}(t) \\mid \\mathbf{x}(0))$.\n","\n","* Use [exponential moving average](https://discuss.pytorch.org/t/how-to-apply-exponential-moving-average-decay-for-variables/10856/3) (EMA) of weights when sampling. This can greatly improve sample quality, but requires slightly longer training time, and requires more work in implementation. We do not include this in this tutorial, but highly recommend it when you employ score-based generative modeling to tackle more challenging real problems."]},{"cell_type":"code","metadata":{"id":"YyQtV7155Nht","executionInfo":{"status":"ok","timestamp":1668844314384,"user_tz":-540,"elapsed":316,"user":{"displayName":"Xingyu CHEN","userId":"07890349438558119356"}}},"source":["#@title Defining a time-dependent score-based model (double click to expand or collapse)\n","\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import numpy as np\n","import functools\n","\n","class GaussianFourierProjection(nn.Module): #用于对时间进行特定傅里叶编码\n","  \"\"\"Gaussian random features for encoding time steps.\"\"\"  \n","  def __init__(self, embed_dim, scale=30.):\n","    super().__init__()\n","    # Randomly sample weights during initialization. These weights are fixed \n","    # during optimization and are not trainable.\n","    self.W = nn.Parameter(torch.randn(embed_dim // 2) * scale, requires_grad=False)\n","  def forward(self, x):\n","    x_proj = x[:, None] * self.W[None, :] * 2 * np.pi\n","    return torch.cat([torch.sin(x_proj), torch.cos(x_proj)], dim=-1)\n","\n","\n","class Dense(nn.Module):\n","  \"\"\"A fully connected layer that reshapes outputs to feature maps.\"\"\" #扩维\n","  def __init__(self, input_dim, output_dim):\n","    super().__init__()\n","    self.dense = nn.Linear(input_dim, output_dim)\n","  def forward(self, x):\n","    return self.dense(x)[..., None, None]\n","\n","\n","class ScoreNet(nn.Module):\n","  \"\"\"A time-dependent score-based model built upon U-Net architecture.基于U-net的时间以来的分数估计\"\"\"\n","\n","  def __init__(self, marginal_prob_std, channels=[32, 64, 128, 256], embed_dim=256):\n","    \"\"\"Initialize a time-dependent score-based network.\n","\n","    Args:\n","      marginal_prob_std: A function that takes time t and gives the standard\n","        deviation of the perturbation kernel p_{0t}(x(t) | x(0)).\n","      channels: The number of channels for feature maps of each resolution.\n","      embed_dim: The dimensionality of Gaussian random feature embeddings.\n","    \"\"\"\n","    super().__init__()\n","    # Gaussian random feature embedding layer for time\n","    self.embed = nn.Sequential(GaussianFourierProjection(embed_dim=embed_dim),\n","         nn.Linear(embed_dim, embed_dim)) #时间编码层\n","    # Encoding layers where the resolution decreases U-net的编码器部分，空间不断减小，通道不断增大\n","    self.conv1 = nn.Conv2d(1, channels[0], 3, stride=1, bias=False)\n","    self.dense1 = Dense(embed_dim, channels[0])\n","    self.gnorm1 = nn.GroupNorm(4, num_channels=channels[0])\n","    self.conv2 = nn.Conv2d(channels[0], channels[1], 3, stride=2, bias=False)\n","    self.dense2 = Dense(embed_dim, channels[1])\n","    self.gnorm2 = nn.GroupNorm(32, num_channels=channels[1])\n","    self.conv3 = nn.Conv2d(channels[1], channels[2], 3, stride=2, bias=False)\n","    self.dense3 = Dense(embed_dim, channels[2])\n","    self.gnorm3 = nn.GroupNorm(32, num_channels=channels[2])\n","    self.conv4 = nn.Conv2d(channels[2], channels[3], 3, stride=2, bias=False)\n","    self.dense4 = Dense(embed_dim, channels[3])\n","    self.gnorm4 = nn.GroupNorm(32, num_channels=channels[3])    \n","\n","    # Decoding layers where the resolution increases 解码器，空间不断增大，通道不断减小，并且有来自编码器部分的skip connection\n","    self.tconv4 = nn.ConvTranspose2d(channels[3], channels[2], 3, stride=2, bias=False)\n","    self.dense5 = Dense(embed_dim, channels[2])\n","    self.tgnorm4 = nn.GroupNorm(32, num_channels=channels[2])\n","    self.tconv3 = nn.ConvTranspose2d(channels[2] + channels[2], channels[1], 3, stride=2, bias=False, output_padding=1)    \n","    self.dense6 = Dense(embed_dim, channels[1])\n","    self.tgnorm3 = nn.GroupNorm(32, num_channels=channels[1])\n","    self.tconv2 = nn.ConvTranspose2d(channels[1] + channels[1], channels[0], 3, stride=2, bias=False, output_padding=1)    \n","    self.dense7 = Dense(embed_dim, channels[0])\n","    self.tgnorm2 = nn.GroupNorm(32, num_channels=channels[0])\n","    self.tconv1 = nn.ConvTranspose2d(channels[0] + channels[0], 1, 3, stride=1)\n","    \n","    # The swish activation function\n","    self.act = lambda x: x * torch.sigmoid(x) # 输出\n","    self.marginal_prob_std = marginal_prob_std\n","  \n","  def forward(self, x, t): \n","    # Obtain the Gaussian random feature embedding for t    时间t进行编码\n","    embed = self.act(self.embed(t))    \n","    # Encoding path 前向计算\n","    h1 = self.conv1(x)    \n","    ## Incorporate information from t 注入时间t\n","    h1 += self.dense1(embed)\n","    ## Group normalization\n","    h1 = self.gnorm1(h1)\n","    h1 = self.act(h1)\n","    h2 = self.conv2(h1)\n","    h2 += self.dense2(embed)\n","    h2 = self.gnorm2(h2)\n","    h2 = self.act(h2)\n","    h3 = self.conv3(h2)\n","    h3 += self.dense3(embed)\n","    h3 = self.gnorm3(h3)\n","    h3 = self.act(h3)\n","    h4 = self.conv4(h3)\n","    h4 += self.dense4(embed)\n","    h4 = self.gnorm4(h4)\n","    h4 = self.act(h4)\n","\n","    # Decoding path\n","    h = self.tconv4(h4)\n","    ## Skip connection from the encoding path\n","    h += self.dense5(embed)\n","    h = self.tgnorm4(h)\n","    h = self.act(h)\n","    h = self.tconv3(torch.cat([h, h3], dim=1)) #skip connection\n","    h += self.dense6(embed)\n","    h = self.tgnorm3(h)\n","    h = self.act(h)\n","    h = self.tconv2(torch.cat([h, h2], dim=1))\n","    h += self.dense7(embed)\n","    h = self.tgnorm2(h)\n","    h = self.act(h)\n","    h = self.tconv1(torch.cat([h, h1], dim=1))\n","\n","    # Normalize output\n","    h = h / self.marginal_prob_std(t)[:, None, None, None] #除以二阶范数的期望值，希望预测的分数的二阶范数逼近与真实的二阶范数\n","    return h"],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PpJSwfyY6mJz"},"source":["## Training with Weighted Sum of Denoising Score Matching Objectives\n","\n","Now let's get our hands dirty on training. First of all, we need to specify an SDE that perturbs the data distribution $p_0$ to a prior distribution $p_T$. We choose the following SDE 定义一个简单的SDE\n","\\begin{align*}\n","d \\mathbf{x} = \\sigma^t d\\mathbf{w}, \\quad t\\in[0,1]\n","\\end{align*}\n","In this case,\n","\\begin{align*}\n","p_{0t}(\\mathbf{x}(t) \\mid \\mathbf{x}(0)) = \\mathcal{N}\\bigg(\\mathbf{x}(t); \\mathbf{x}(0), \\frac{1}{2\\log \\sigma}(\\sigma^{2t} - 1) \\mathbf{I}\\bigg)\n","\\end{align*}\n","and we can choose the weighting function $\\lambda(t) = \\frac{1}{2 \\log \\sigma}(\\sigma^{2t} - 1)$.\n","\n","When $\\sigma$ is large, the prior distribution, $p_{t=1}$ is \n","\\begin{align*}\n","\\int p_0(\\mathbf{y})\\mathcal{N}\\bigg(\\mathbf{x}; \\mathbf{y}, \\frac{1}{2 \\log \\sigma}(\\sigma^2 - 1)\\mathbf{I}\\bigg) d \\mathbf{y} \\approx \\mathbf{N}\\bigg(\\mathbf{x}; \\mathbf{0}, \\frac{1}{2 \\log \\sigma}(\\sigma^2 - 1)\\mathbf{I}\\bigg),\n","\\end{align*}\n","which is approximately independent of the data distribution and is easy to sample from.\n","\n","Intuitively, this SDE captures a continuum of Gaussian perturbations with variance function $\\frac{1}{2 \\log \\sigma}(\\sigma^{2t} - 1)$. This continuum of perturbations allows us to gradually transfer samples from a data distribution $p_0$ to a simple Gaussian distribution $p_1$."]},{"cell_type":"code","metadata":{"id":"LZC7wrOvxLdL","executionInfo":{"status":"ok","timestamp":1668844720498,"user_tz":-540,"elapsed":349,"user":{"displayName":"Xingyu CHEN","userId":"07890349438558119356"}}},"source":["#@title Set up the SDE\n","\n","device = 'cuda' #@param ['cuda', 'cpu'] {'type':'string'}\n","\n","def marginal_prob_std(t, sigma):\n","  \"\"\"Compute the mean and standard deviation of $p_{0t}(x(t) | x(0))$.\n","  计算任意t时刻的扰动后条件高斯分布的标准差\n","\n","  Args:    \n","    t: A vector of time steps.\n","    sigma: The $\\sigma$ in our SDE.  \n","  \n","  Returns:\n","    The standard deviation.\n","  \"\"\"    \n","  t = torch.tensor(t, device=device)\n","  return torch.sqrt((sigma**(2 * t) - 1.) / 2. / np.log(sigma))\n","\n","def diffusion_coeff(t, sigma):\n","  \"\"\"Compute the diffusion coefficient of our SDE.\n","  任意t时刻的扩散系数，本列定义的SDE没有漂移系数\n","\n","  Args:\n","    t: A vector of time steps.\n","    sigma: The $\\sigma$ in our SDE.\n","  \n","  Returns:\n","    The vector of diffusion coefficients.\n","  \"\"\"\n","  return torch.tensor(sigma**t, device=device)\n","  \n","sigma =  25.0#@param {'type':'number'}\n","marginal_prob_std_fn = functools.partial(marginal_prob_std, sigma=sigma) # 构建无参函数\n","diffusion_coeff_fn = functools.partial(diffusion_coeff, sigma=sigma)"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"zOsoqPdXHuL5","executionInfo":{"status":"ok","timestamp":1668845066605,"user_tz":-540,"elapsed":324,"user":{"displayName":"Xingyu CHEN","userId":"07890349438558119356"}}},"source":["#@title Define the loss function (double click to expand or collapse)\n","\n","def loss_fn(model, x, marginal_prob_std, eps=1e-5):\n","  \"\"\"The loss function for training score-based generative models.\n","\n","  Args:\n","    model: A PyTorch model instance that represents a \n","      time-dependent score-based model.\n","    x: A mini-batch of training data.   训练样本 \n","    marginal_prob_std: A function that gives the standard deviation of \n","      the perturbation kernel. 标准差\n","    eps: A tolerance value for numerical stability. 数据稳定性\n","  \"\"\"\n","  # step1 从[0.00001,0.9999]随机生成batchsize个浮点型t\n","  random_t = torch.rand(x.shape[0], device=x.device) * (1. - eps) + eps  \n","  # 2 基于重参数技巧采样出分布p_t(x)的一个随机样本perturbed_x\n","  z = torch.randn_like(x)\n","  std = marginal_prob_std(random_t) #标准差\n","  perturbed_x = x + z * std[:, None, None, None] #扰动后的x\n","  # 3 将当前的加噪样本和时间输入到score network 中预测出分数score\n","  score = model(perturbed_x, random_t)\n","  # 4 计算score matching loss\n","  loss = torch.mean(torch.sum((score * std[:, None, None, None] + z)**2, dim=(1,2,3)))\n","  return loss"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"8PPsLx4dGCGa","colab":{"base_uri":"https://localhost:8080/","height":544,"referenced_widgets":["30a674589e9543e59b96fac197a84f81","7e37cc2e3a774698bc0d9305c06a388b","56ac7221b34547778224a6f17cdedfaf","588912f54a0a41f185e9969481a3b28c","3d43c818b4494aba802a5544b2fdaea7","a3828b965fed4f6aa0a72ddb2b971938","f8a55b778d0a4b5890618d03beb0d6aa","821573885ad04dc2a79935b727944d98","198a1756a1fd4b1e9ec1a8e43df23625","0ce2ac466e954e299373e5af15045e29","b12d763ed27b40d3b8ef20714e4b522d","75578127ba6741798e065c0d5c42bc4f","44da05c5ace44a5b869c163d72a99093","673c1c109fca492cbaf5429478b622ef","d1e7d84d00a4454b9f58348ba582b0e7","de8dea285745430ab12532d32f434e9f","b5335a481a164696acc2a5a5b157d787","8845c6e7ec3b495a8ede33ea74ef0e3e","c75e4c0f6f8c4a0393b40879a5ad504b","4e4641f5bd854c26b844f615ee64954d","e7efd36ed00a49538934a4b944ceed8b","e3770c25098346469051beca713620c0","a357ccbed4144be7b663bc8472ccd6e2","b7554177735b462987b94b6d49c2944f","66b658c8db5a473bac4be3498cf1b8b2","8c2694caa46d454f9de048a8be2b707e","61835cdf921f4a8286dfc0b425eef824","2ab2f88453a34b5a9bd1cf3792b0ca75","f7bdd16faf0f4f009609c309d803c2d6","6bc8f24716f54866a8690e5a18a616d2","c0474f24c1814d46a983ca75280426c0","c3234c0b8c31415d86abad81943a0831","e3118a26e0614cfb92101038c838df8b","53e82774842845918b16cc3949c281ac","325430e33fab460b8d36a9fe3946ce9d","1a150b4704704c6c892a4f8c5fb8cc97","59e95319ef6d40b186700eba5026655c","dd32dd48a5d444419ded771143ca10fd","b399140cccb1487484a7f386f9c32675","8d333b2db6cb4c9f9c552bd37d1b5a19","8a6ab7b29da84840b422b687ba976d64","94a41746a42b4bfe88f60eacac62f69e","65ff71a1e2124057a1e4776b689dc5de","f3b853d2f86140dba4fa0d33eea84db5","ce881d5ab8c4432b9cbf0c0ff0f64260","7e9aee1913124c31a01a4736152c0c69","894ece4e089c470d9386d2119183eef1","1c0f4fa5b7834a018c8dd702e17fd1d9","5fe2d038a7b247aea8c4726f7bebdf0f","d358a482032d415a8aa22eee6e635621","cd14efd07dc149dcbe129fae66ec019d","00dacc6cd9b24ce79468a144631276bf","fb751efad42943769261ed8fa4737144","41b85f8a4f1d4400a26dfae1755bf5af","4f115af7d7244c5db72d3e6a017852ef"]},"executionInfo":{"status":"ok","timestamp":1668846857765,"user_tz":-540,"elapsed":1681439,"user":{"displayName":"Xingyu CHEN","userId":"07890349438558119356"}},"outputId":"a1b2c3cc-02aa-4f29-faff-37583cd7f455"},"source":["#@title Training (double click to expand or collapse)\n","\n","import torch\n","import functools\n","from torch.optim import Adam\n","from torch.utils.data import DataLoader\n","import torchvision.transforms as transforms\n","from torchvision.datasets import MNIST\n","import tqdm\n","\n","\n","score_model = torch.nn.DataParallel(ScoreNet(marginal_prob_std=marginal_prob_std_fn))\n","score_model = score_model.to(device)\n","\n","n_epochs =   50#@param {'type':'integer'}\n","## size of a mini-batch\n","batch_size =  32 #@param {'type':'integer'}\n","## learning rate\n","lr=1e-4 #@param {'type':'number'}\n","\n","dataset = MNIST('.', train=True, transform=transforms.ToTensor(), download=True)\n","data_loader = DataLoader(dataset, batch_size=batch_size, shuffle=True, num_workers=4)\n","\n","optimizer = Adam(score_model.parameters(), lr=lr)\n","tqdm_epoch = tqdm.notebook.trange(n_epochs)\n","for epoch in tqdm_epoch:\n","  avg_loss = 0.\n","  num_items = 0\n","  for x, y in data_loader:\n","    x = x.to(device)    \n","    loss = loss_fn(score_model, x, marginal_prob_std_fn)\n","    optimizer.zero_grad()\n","    loss.backward()    \n","    optimizer.step()\n","    avg_loss += loss.item() * x.shape[0]\n","    num_items += x.shape[0]\n","  # Print the averaged training loss so far.\n","  tqdm_epoch.set_description('Average Loss: {:5f}'.format(avg_loss / num_items))\n","  # Update the checkpoint after each epoch of training.\n","  torch.save(score_model.state_dict(), 'ckpt.pth')"],"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz to ./MNIST/raw/train-images-idx3-ubyte.gz\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/9912422 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"30a674589e9543e59b96fac197a84f81"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Extracting ./MNIST/raw/train-images-idx3-ubyte.gz to ./MNIST/raw\n","\n","Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz to ./MNIST/raw/train-labels-idx1-ubyte.gz\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/28881 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"75578127ba6741798e065c0d5c42bc4f"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Extracting ./MNIST/raw/train-labels-idx1-ubyte.gz to ./MNIST/raw\n","\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz to ./MNIST/raw/t10k-images-idx3-ubyte.gz\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/1648877 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a357ccbed4144be7b663bc8472ccd6e2"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Extracting ./MNIST/raw/t10k-images-idx3-ubyte.gz to ./MNIST/raw\n","\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz to ./MNIST/raw/t10k-labels-idx1-ubyte.gz\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/4542 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"53e82774842845918b16cc3949c281ac"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Extracting ./MNIST/raw/t10k-labels-idx1-ubyte.gz to ./MNIST/raw\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:566: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  cpuset_checked))\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/50 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ce881d5ab8c4432b9cbf0c0ff0f64260"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:16: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  app.launch_new_instance()\n"]}]},{"cell_type":"markdown","metadata":{"id":"tldaUHUtHuej"},"source":["## Sampling with Numerical SDE Solvers\n","Recall that for any SDE of the form\n","\\begin{align*}\n","d \\mathbf{x} = \\mathbf{f}(\\mathbf{x}, t) dt + g(t) d\\mathbf{w},\n","\\end{align*}\n","the reverse-time SDE is given by\n","\\begin{align*}\n","d \\mathbf{x} = [\\mathbf{f}(\\mathbf{x}, t) - g(t)^2 \\nabla_\\mathbf{x} \\log p_t(\\mathbf{x})] dt + g(t) d \\bar{\\mathbf{w}}.\n","\\end{align*}\n","Since we have chosen the forward SDE to be\n","\\begin{align*}\n","d \\mathbf{x} = \\sigma^t d\\mathbf{w}, \\quad t\\in[0,1]\n","\\end{align*}\n","The reverse-time SDE is given by\n","\\begin{align*}\n","d\\mathbf{x} = -\\sigma^{2t} \\nabla_\\mathbf{x} \\log p_t(\\mathbf{x}) dt + \\sigma^t d \\bar{\\mathbf{w}}.\n","\\end{align*}\n","To sample from our time-dependent score-based model $s_\\theta(\\mathbf{x}, t)$, we first draw a sample from the prior distribution $p_1 \\approx \\mathbf{N}\\bigg(\\mathbf{x}; \\mathbf{0}, \\frac{1}{2}(\\sigma^{2} - 1) \\mathbf{I}\\bigg)$, and then solve the reverse-time SDE with numerical methods.\n","\n","In particular, using our time-dependent score-based model, the reverse-time SDE can be approximated by\n","\\begin{align*}\n","d\\mathbf{x} = -\\sigma^{2t} s_\\theta(\\mathbf{x}, t) dt + \\sigma^t d \\bar{\\mathbf{w}}\n","\\end{align*}\n","\n","Next, one can use numerical methods to solve for the reverse-time SDE, such as the [Euler-Maruyama](https://en.wikipedia.org/wiki/Euler%E2%80%93Maruyama_method) approach. It is based on a simple discretization to the SDE, replacing $dt$ with $\\Delta t$ and $d \\mathbf{w}$ with $\\mathbf{z} \\sim \\mathcal{N}(\\mathbf{0}, g^2(t) \\Delta t \\mathbf{I})$. When applied to our reverse-time SDE, we can obtain the following iteration rule\n","\\begin{align}\n","\\mathbf{x}_{t-\\Delta t} = \\mathbf{x}_t + \\sigma^{2t} s_\\theta(\\mathbf{x}_t, t)\\Delta t + \\sigma^t\\sqrt{\\Delta t} \\mathbf{z}_t,\n","\\end{align}\n","where $\\mathbf{z}_t \\sim \\mathcal{N}(\\mathbf{0}, \\mathbf{I})$."]},{"cell_type":"code","metadata":{"id":"6FxBTOSSH2QR","executionInfo":{"status":"ok","timestamp":1668847033937,"user_tz":-540,"elapsed":338,"user":{"displayName":"Xingyu CHEN","userId":"07890349438558119356"}}},"source":["#@title Define the Euler-Maruyama sampler (double click to expand or collapse)\n","\n","## The number of sampling steps.\n","num_steps =  500#@param {'type':'integer'}\n","def Euler_Maruyama_sampler( score_model, \n","                marginal_prob_std,\n","                diffusion_coeff, \n","                batch_size=64, \n","                num_steps=num_steps, \n","                device='cuda', \n","                eps=1e-3):\n","  \"\"\"Generate samples from score-based models with the Euler-Maruyama solver.\n","\n","  Args:\n","    score_model: A PyTorch model that represents the time-dependent score-based model.\n","    marginal_prob_std: A function that gives the standard deviation of\n","      the perturbation kernel.\n","    diffusion_coeff: A function that gives the diffusion coefficient of the SDE.\n","    batch_size: The number of samplers to generate by calling this function once.\n","    num_steps: The number of sampling steps. \n","      Equivalent to the number of discretized time steps.\n","    device: 'cuda' for running on GPUs, and 'cpu' for running on CPUs.\n","    eps: The smallest time step for numerical stability.\n","  \n","  Returns:\n","    Samples.    \n","  \"\"\"\n","  #定义初始时间1和先验分布的随机样本\n","  t = torch.ones(batch_size, device=device)\n","  init_x = torch.randn(batch_size, 1, 28, 28, device=device) \\\n","    * marginal_prob_std(t)[:, None, None, None]\n","  #step2 定义采样的逆时间网格以及每一步的时间步长\n","  time_steps = torch.linspace(1., eps, num_steps, device=device)\n","  step_size = time_steps[0] - time_steps[1]\n","  x = init_x\n","  # 根据欧拉算法求解逆时间SDE\n","  with torch.no_grad():\n","    for time_step in tqdm.notebook.tqdm(time_steps):      \n","      batch_time_step = torch.ones(batch_size, device=device) * time_step\n","      g = diffusion_coeff(batch_time_step)\n","      mean_x = x + (g**2)[:, None, None, None] * score_model(x, batch_time_step) * step_size\n","      x = mean_x + torch.sqrt(step_size) * g[:, None, None, None] * torch.randn_like(x)      \n","  # Do not include any noise in the last sampling step.\n","  # 去最后一步的期望值作为生成的样本\n","  return mean_x"],"execution_count":12,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DC6QVkUQvFyB"},"source":["## Sampling with Predictor-Corrector Methods\n","融合欧拉数值解法和朗之万动力学采样来生成更高质量的数据。在这里，数值解法被认为是Predictor 而模拟采样方法被认为是COrrector 这种融合的采样方法称为PC-Sampler  \n","Aside from generic numerical SDE solvers, we can leverage special properties of our reverse-time SDE for better solutions. Since we have an estimate of the score of $p_t(\\mathbf{x}(t))$ via the score-based model, i.e., $s_\\theta(\\mathbf{x}, t) \\approx \\nabla_{\\mathbf{x}(t)} \\log p_t(\\mathbf{x}(t))$, we can leverage score-based MCMC approaches, such as Langevin MCMC, to correct the solution obtained by numerical SDE solvers.\n","\n","Score-based MCMC approaches can produce samples from a distribution $p(\\mathbf{x})$ once its score $\\nabla_\\mathbf{x} \\log p(\\mathbf{x})$ is known. For example, Langevin MCMC operates by running the following iteration rule for $i=1,2,\\cdots, N$:\n","\\begin{align*}\n","\\mathbf{x}_{i+1} = \\mathbf{x}_{i} + \\epsilon \\nabla_\\mathbf{x} \\log p(\\mathbf{x}_i) + \\sqrt{2\\epsilon} \\mathbf{z}_i,\n","\\end{align*}\n","where $\\mathbf{z}_i \\sim \\mathcal{N}(\\mathbf{0}, \\mathbf{I})$, $\\epsilon > 0$ is the step size, and $\\mathbf{x}_1$ is initialized from any prior distribution $\\pi(\\mathbf{x}_1)$. When $N\\to\\infty$ and $\\epsilon \\to 0$, the final value $\\mathbf{x}_{N+1}$ becomes a sample from $p(\\mathbf{x})$ under some regularity conditions. Therefore, given $s_\\theta(\\mathbf{x}, t) \\approx \\nabla_\\mathbf{x} \\log p_t(\\mathbf{x})$, we can get an approximate sample from $p_t(\\mathbf{x})$ by running several steps of Langevin MCMC, replacing $\\nabla_\\mathbf{x} \\log p_t(\\mathbf{x})$ with $s_\\theta(\\mathbf{x}, t)$ in the iteration rule.\n","\n","Predictor-Corrector samplers combine both numerical solvers for the reverse-time SDE and the Langevin MCMC approach. In particular, we first apply one step of numerical SDE solver to obtain $\\mathbf{x}_{t-\\Delta t}$ from $\\mathbf{x}_t$, which is called the \"predictor\" step. Next, we apply several steps of Langevin MCMC to refine $\\mathbf{x}_t$, such that $\\mathbf{x}_t$ becomes a more accurate sample from $p_{t-\\Delta t}(\\mathbf{x})$. This is the \"corrector\" step as the MCMC helps reduce the error of the numerical SDE solver. "]},{"cell_type":"code","metadata":{"id":"qW1HaPZb9gDM","executionInfo":{"status":"ok","timestamp":1668847038874,"user_tz":-540,"elapsed":334,"user":{"displayName":"Xingyu CHEN","userId":"07890349438558119356"}}},"source":["#@title Define the Predictor-Corrector sampler (double click to expand or collapse)\n","\n","signal_to_noise_ratio = 0.16 #@param {'type':'number'}\n","\n","## The number of sampling steps.\n","num_steps =  500#@param {'type':'integer'}\n","def pc_sampler(score_model, \n","               marginal_prob_std,\n","               diffusion_coeff,\n","               batch_size=64, \n","               num_steps=num_steps, \n","               snr=signal_to_noise_ratio,                \n","               device='cuda',\n","               eps=1e-3):\n","  \"\"\"Generate samples from score-based models with Predictor-Corrector method.\n","\n","  Args:\n","    score_model: A PyTorch model that represents the time-dependent score-based model.\n","    marginal_prob_std: A function that gives the standard deviation\n","      of the perturbation kernel.\n","    diffusion_coeff: A function that gives the diffusion coefficient \n","      of the SDE.\n","    batch_size: The number of samplers to generate by calling this function once.\n","    num_steps: The number of sampling steps. \n","      Equivalent to the number of discretized time steps.    \n","    device: 'cuda' for running on GPUs, and 'cpu' for running on CPUs.\n","    eps: The smallest time step for numerical stability.\n","  \n","  Returns: \n","    Samples.\n","  \"\"\"\n","  # 定义初始时间1和先验分布的随机样本\n","  t = torch.ones(batch_size, device=device)\n","  init_x = torch.randn(batch_size, 1, 28, 28, device=device) * marginal_prob_std(t)[:, None, None, None]\n","  # 2 定义采样的逆时间网格以及每一步的时间步长\n","  time_steps = np.linspace(1., eps, num_steps)\n","  step_size = time_steps[0] - time_steps[1]\n","  # step3 重复交替镜像朗之万采样和逆时间SDE的欧拉数值求解\n","  x = init_x\n","  with torch.no_grad():\n","    for time_step in tqdm.notebook.tqdm(time_steps):      \n","      batch_time_step = torch.ones(batch_size, device=device) * time_step\n","      # Corrector step (Langevin MCMC) 矫正\n","      grad = score_model(x, batch_time_step)\n","      grad_norm = torch.norm(grad.reshape(grad.shape[0], -1), dim=-1).mean()\n","      noise_norm = np.sqrt(np.prod(x.shape[1:]))\n","      langevin_step_size = 2 * (snr * noise_norm / grad_norm)**2 \n","      x = x + langevin_step_size * grad + torch.sqrt(2 * langevin_step_size) * torch.randn_like(x)      \n","\n","      # Predictor step (Euler-Maruyama) \n","      g = diffusion_coeff(batch_time_step)\n","      x_mean = x + (g**2)[:, None, None, None] * score_model(x, batch_time_step) * step_size\n","      x = x_mean + torch.sqrt(g**2 * step_size)[:, None, None, None] * torch.randn_like(x)      \n","    \n","    # The last step does not include any noise\n","    return x_mean"],"execution_count":13,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0PdMMadpUbrj"},"source":["## Sampling with Numerical ODE Solvers\n","基于伴随常微分数值解法来生成采样数据  \n","到目前为止我们还无法精确计算出score-based model 所取得的对数似然是多少，接下来，我们可以通过引入伴随常微分方程来实现对确切的对数似然的计算\n","\n","For any SDE of the form\n","\\begin{align*}\n","d \\mathbf{x} = \\mathbf{f}(\\mathbf{x}, t) d t + g(t) d \\mathbf{w},\n","\\end{align*}\n","there exists an associated ordinary differential equation (ODE)\n","\\begin{align*}\n","d \\mathbf{x} = \\bigg[\\mathbf{f}(\\mathbf{x}, t) - \\frac{1}{2}g(t)^2 \\nabla_\\mathbf{x} \\log p_t(\\mathbf{x})\\bigg] dt,\n","\\end{align*}\n","such that their trajectories have the same mariginal probability density $p_t(\\mathbf{x})$. Therefore, by solving this ODE in the reverse time direction, we can sample from the same distribution as solving the reverse-time SDE.\n","We call this ODE the *probability flow ODE*.\n","\n","Below is a schematic figure showing how trajectories from this probability flow ODE differ from SDE trajectories, while still sampling from the same distribution.\n","![SDE and ODE](https://drive.google.com/uc?id=1CGFbtY2mCjlIY8pjvoGevfa_32d4b1dj)\n","\n","Therefore, we can start from a sample from $p_T$, integrate the ODE in the reverse time direction, and then get a sample from $p_0$. In particular, for the SDE in our running example, we can integrate the following ODE from $t=T$ to $0$ for sample generation\n","\\begin{align*}\n","d\\mathbf{x} =  -\\frac{1}{2}\\sigma^{2t} s_\\theta(\\mathbf{x}, t) dt.\n","\\end{align*}\n","This can be done using many black-box ODE solvers provided by packages such as `scipy`."]},{"cell_type":"code","metadata":{"id":"nxrCTFM8CfDN","executionInfo":{"status":"ok","timestamp":1668847396511,"user_tz":-540,"elapsed":326,"user":{"displayName":"Xingyu CHEN","userId":"07890349438558119356"}}},"source":["#@title Define the ODE sampler (double click to expand or collapse)\n","\n","from scipy import integrate\n","\n","## The error tolerance for the black-box ODE solver\n","error_tolerance = 1e-5 #@param {'type': 'number'}\n","def ode_sampler(score_model,\n","                marginal_prob_std,\n","                diffusion_coeff,\n","                batch_size=64, \n","                atol=error_tolerance, \n","                rtol=error_tolerance, \n","                device='cuda', \n","                z=None,\n","                eps=1e-3):\n","  \"\"\"Generate samples from score-based models with black-box ODE solvers.\n","\n","  Args:\n","    score_model: A PyTorch model that represents the time-dependent score-based model.\n","    marginal_prob_std: A function that returns the standard deviation \n","      of the perturbation kernel.\n","    diffusion_coeff: A function that returns the diffusion coefficient of the SDE.\n","    batch_size: The number of samplers to generate by calling this function once.\n","    atol: Tolerance of absolute errors.\n","    rtol: Tolerance of relative errors.\n","    device: 'cuda' for running on GPUs, and 'cpu' for running on CPUs.\n","    z: The latent code that governs the final sample. If None, we start from p_1;\n","      otherwise, we start from the given z.\n","    eps: The smallest time step for numerical stability.\n","  \"\"\"\n","  # 初始时间和初始值\n","  t = torch.ones(batch_size, device=device)\n","  # Create the latent code \n","  if z is None:\n","    init_x = torch.randn(batch_size, 1, 28, 28, device=device) \\\n","      * marginal_prob_std(t)[:, None, None, None]\n","  else:\n","    init_x = z\n","    \n","  shape = init_x.shape\n","  # 定义分数预测函数和常微分函数\n","  def score_eval_wrapper(sample, time_steps):\n","    \"\"\"A wrapper of the score-based model for use by the ODE solver.\"\"\"\n","    sample = torch.tensor(sample, device=device, dtype=torch.float32).reshape(shape)\n","    time_steps = torch.tensor(time_steps, device=device, dtype=torch.float32).reshape((sample.shape[0], ))    \n","    with torch.no_grad():    \n","      score = score_model(sample, time_steps)\n","    return score.cpu().numpy().reshape((-1,)).astype(np.float64)\n","  \n","  def ode_func(t, x):        \n","    \"\"\"The ODE function for use by the ODE solver.\"\"\"\n","    time_steps = np.ones((shape[0],)) * t    \n","    g = diffusion_coeff(torch.tensor(t)).cpu().numpy()\n","    return  -0.5 * (g**2) * score_eval_wrapper(x, time_steps)\n","  \n","  # Run the black-box ODE solver. 调用常微分求解算子来解除t=eps时刻的值，即预测的样本\n","  res = integrate.solve_ivp(ode_func, (1., eps), init_x.reshape(-1).cpu().numpy(), rtol=rtol, atol=atol, method='RK45')  \n","  print(f\"Number of function evaluations: {res.nfev}\")\n","  x = torch.tensor(res.y[:, -1], device=device).reshape(shape)\n","\n","  return x\n"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"id":"kKoAPnr7Pf2B","colab":{"base_uri":"https://localhost:8080/","height":461,"referenced_widgets":["2263bacf9bd1488d9378993875604f51","55fa2bd3482a4b2e8653ff43b96dc4a6","93082464df834c60b36b9408f1d9f9ad","e548b027f001406ea5ef750772cc7749","52284bb8d085477ebed699305aacd6fc","f676600c35f6446da3b0f713ebf412f9","f500fa5a93e84e15963018b125a47309","e0020383c8c34f3987725dbc3026e820","10d6da865b20466d9cc1658b876ac47b","7abc605abaff4a42bed5a1a04c801c50","e92ff81a5b45484aa26294957600848b"]},"executionInfo":{"status":"ok","timestamp":1668847491616,"user_tz":-540,"elapsed":6422,"user":{"displayName":"Xingyu CHEN","userId":"07890349438558119356"}},"outputId":"172d3413-45b9-49b9-973e-fdc32089ba42"},"source":["#@title Sampling (double click to expand or collapse)\n","\n","from torchvision.utils import make_grid\n","\n","## Load the pre-trained checkpoint from disk.\n","device = 'cuda' #@param ['cuda', 'cpu'] {'type':'string'}\n","ckpt = torch.load('ckpt.pth', map_location=device)\n","score_model.load_state_dict(ckpt)\n","\n","sample_batch_size = 64 #@param {'type':'integer'}\n","sampler = pc_sampler #@param ['Euler_Maruyama_sampler', 'pc_sampler', 'ode_sampler'] {'type': 'raw'}\n","\n","## Generate samples using the specified sampler.\n","samples = sampler(score_model, \n","                  marginal_prob_std_fn,\n","                  diffusion_coeff_fn, \n","                  sample_batch_size, \n","                  device=device)\n","\n","## Sample visualization.\n","samples = samples.clamp(0.0, 1.0)\n","%matplotlib inline\n","import matplotlib.pyplot as plt\n","sample_grid = make_grid(samples, nrow=int(np.sqrt(sample_batch_size)))\n","\n","plt.figure(figsize=(6,6))\n","plt.axis('off')\n","plt.imshow(sample_grid.permute(1, 2, 0).cpu(), vmin=0., vmax=1.)\n","plt.show()"],"execution_count":17,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:16: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  app.launch_new_instance()\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/500 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2263bacf9bd1488d9378993875604f51"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"yC49nk6ZXqOS"},"source":["## Likelihood Computation\n","\n","A by-product of the probability flow ODE formulation is likelihood computation. Suppose we have a differentiable one-to-one mapping $\\mathbf{h}$ that transforms a data sample $\\mathbf{x} \\sim p_0$ to a prior distribution $\\mathbf{h}(\\mathbf{x}) \\sim p_T$. We can compute the likelihood of $p_0(\\mathbf{x})$ via the following [change-of-variable formula](https://en.wikipedia.org/wiki/Probability_density_function#Function_of_random_variables_and_change_of_variables_in_the_probability_density_function)\n","\\begin{align*}\n","p_0(\\mathbf{x}) = p_T(\\mathbf{h}(\\mathbf{x})) |\\operatorname{det}(J_\\mathbf{h}(\\mathbf{x}))|,\n","\\end{align*}\n","where $J_\\mathbf{h}(\\mathbf{x})$ represents the Jacobian of the mapping $\\mathbf{h}$, and we assume it is efficient to evaluate the likelihood of the prior distribution $p_T$. \n","\n","The trajectories of an ODE also define a one-to-one mapping from $\\mathbf{x}(0)$ to $\\mathbf{x}(T)$. For ODEs of the form\n","\\begin{align*}\n","d \\mathbf{x} = \\mathbf{f}(\\mathbf{x}, t) dt,\n","\\end{align*}\n","there exists an [instantaneous change-of-variable formula](https://arxiv.org/abs/1806.07366) that connects the probability of $p_0(\\mathbf{x})$ and $p_1(\\mathbf{x})$, given by\n","\\begin{align*}\n","p_0 (\\mathbf{x}(0)) = e^{\\int_0^1 \\operatorname{div} \\mathbf{f}(\\mathbf{x}(t), t) d t} p_1(\\mathbf{x}(1)),\n","\\end{align*}\n","where $\\operatorname{div}$ denotes the divergence function (trace of Jacobian). \n","\n","In practice, this divergence function can be hard to evaluate for general vector-valued function $\\mathbf{f}$, but we can use an unbiased estimator, named [Skilling-Hutchinson estimator](http://blog.shakirm.com/2015/09/machine-learning-trick-of-the-day-3-hutchinsons-trick/), to approximate the trace. Let $\\boldsymbol \\epsilon \\sim \\mathcal{N}(\\mathbf{0}, \\mathbf{I})$. The Skilling-Hutchinson estimator is based on the fact that\n","\\begin{align*}\n","\\operatorname{div} \\mathbf{f}(\\mathbf{x}) = \\mathbb{E}_{\\boldsymbol\\epsilon \\sim \\mathcal{N}(\\mathbf{0}, \\mathbf{I})}[\\boldsymbol\\epsilon^\\intercal  J_\\mathbf{f}(\\mathbf{x}) \\boldsymbol\\epsilon].\n","\\end{align*}\n","Therefore, we can simply sample a random vector $\\boldsymbol \\epsilon \\sim \\mathcal{N}(\\mathbf{0}, \\mathbf{I})$, and then use $\\boldsymbol \\epsilon^\\intercal J_\\mathbf{f}(\\mathbf{x}) \\boldsymbol \\epsilon$ to estimate the divergence of $\\mathbf{f}(\\mathbf{x})$. This estimator only requires computing the Jacobian-vector product $J_\\mathbf{f}(\\mathbf{x})\\boldsymbol \\epsilon$, which is typically efficient.\n","\n","As a result, for our probability flow ODE, we can compute the (log) data likelihood with the following\n","\\begin{align*}\n","\\log p_0(\\mathbf{x}(0)) = \\log p_1(\\mathbf{x}(1)) -\\frac{1}{2}\\int_0^1 \\frac{d[\\sigma^2(t)]}{dt} \\operatorname{div} s_\\theta(\\mathbf{x}(t), t) dt.\n","\\end{align*}\n","With the Skilling-Hutchinson estimator, we can compute the divergence via\n","\\begin{align*}\n","\\operatorname{div} s_\\theta(\\mathbf{x}(t), t) = \\mathbb{E}_{\\boldsymbol\\epsilon \\sim \\mathcal{N}(\\mathbf{0}, \\mathbf{I})}[\\boldsymbol\\epsilon^\\intercal  J_{s_\\theta}(\\mathbf{x}(t), t) \\boldsymbol\\epsilon].\n","\\end{align*}\n","Afterwards, we can compute the integral with numerical integrators. This gives us an unbiased estimate to the true data likelihood, and we can make it more and more accurate when we run it multiple times and take the average. The numerical integrator requires $\\mathbf{x}(t)$ as a function of $t$, which can be obtained by the probability flow ODE sampler."]},{"cell_type":"code","metadata":{"id":"DfOkg5jBZcjF","cellView":"form"},"source":["#@title Define the likelihood function (double click to expand or collapse)\n","\n","def prior_likelihood(z, sigma):\n","  \"\"\"The likelihood of a Gaussian distribution with mean zero and \n","      standard deviation sigma.\"\"\"\n","  shape = z.shape\n","  N = np.prod(shape[1:])\n","  return -N / 2. * torch.log(2*np.pi*sigma**2) - torch.sum(z**2, dim=(1,2,3)) / (2 * sigma**2)\n","\n","def ode_likelihood(x, \n","                   score_model,\n","                   marginal_prob_std, \n","                   diffusion_coeff,\n","                   batch_size=64, \n","                   device='cuda',\n","                   eps=1e-5):\n","  \"\"\"Compute the likelihood with probability flow ODE.\n","  \n","  Args:\n","    x: Input data.\n","    score_model: A PyTorch model representing the score-based model.\n","    marginal_prob_std: A function that gives the standard deviation of the \n","      perturbation kernel.\n","    diffusion_coeff: A function that gives the diffusion coefficient of the \n","      forward SDE.\n","    batch_size: The batch size. Equals to the leading dimension of `x`.\n","    device: 'cuda' for evaluation on GPUs, and 'cpu' for evaluation on CPUs.\n","    eps: A `float` number. The smallest time step for numerical stability.\n","\n","  Returns:\n","    z: The latent code for `x`.\n","    bpd: The log-likelihoods in bits/dim.\n","  \"\"\"\n","\n","  # Draw the random Gaussian sample for Skilling-Hutchinson's estimator.\n","  epsilon = torch.randn_like(x)\n","      \n","  def divergence_eval(sample, time_steps, epsilon):      \n","    \"\"\"Compute the divergence of the score-based model with Skilling-Hutchinson.\"\"\"\n","    with torch.enable_grad():\n","      sample.requires_grad_(True)\n","      score_e = torch.sum(score_model(sample, time_steps) * epsilon)\n","      grad_score_e = torch.autograd.grad(score_e, sample)[0]\n","    return torch.sum(grad_score_e * epsilon, dim=(1, 2, 3))    \n","  \n","  shape = x.shape\n","\n","  def score_eval_wrapper(sample, time_steps):\n","    \"\"\"A wrapper for evaluating the score-based model for the black-box ODE solver.\"\"\"\n","    sample = torch.tensor(sample, device=device, dtype=torch.float32).reshape(shape)\n","    time_steps = torch.tensor(time_steps, device=device, dtype=torch.float32).reshape((sample.shape[0], ))    \n","    with torch.no_grad():    \n","      score = score_model(sample, time_steps)\n","    return score.cpu().numpy().reshape((-1,)).astype(np.float64)\n","  \n","  def divergence_eval_wrapper(sample, time_steps):\n","    \"\"\"A wrapper for evaluating the divergence of score for the black-box ODE solver.\"\"\"\n","    with torch.no_grad():\n","      # Obtain x(t) by solving the probability flow ODE.\n","      sample = torch.tensor(sample, device=device, dtype=torch.float32).reshape(shape)\n","      time_steps = torch.tensor(time_steps, device=device, dtype=torch.float32).reshape((sample.shape[0], ))    \n","      # Compute likelihood.\n","      div = divergence_eval(sample, time_steps, epsilon)\n","      return div.cpu().numpy().reshape((-1,)).astype(np.float64)\n","  \n","  def ode_func(t, x):\n","    \"\"\"The ODE function for the black-box solver.\"\"\"\n","    time_steps = np.ones((shape[0],)) * t    \n","    sample = x[:-shape[0]]\n","    logp = x[-shape[0]:]\n","    g = diffusion_coeff(torch.tensor(t)).cpu().numpy()\n","    sample_grad = -0.5 * g**2 * score_eval_wrapper(sample, time_steps)\n","    logp_grad = -0.5 * g**2 * divergence_eval_wrapper(sample, time_steps)\n","    return np.concatenate([sample_grad, logp_grad], axis=0)\n","\n","  init = np.concatenate([x.cpu().numpy().reshape((-1,)), np.zeros((shape[0],))], axis=0)\n","  # Black-box ODE solver\n","  res = integrate.solve_ivp(ode_func, (eps, 1.), init, rtol=1e-5, atol=1e-5, method='RK45')  \n","  zp = torch.tensor(res.y[:, -1], device=device)\n","  z = zp[:-shape[0]].reshape(shape)\n","  delta_logp = zp[-shape[0]:].reshape(shape[0])\n","  sigma_max = marginal_prob_std(1.)\n","  prior_logp = prior_likelihood(z, sigma_max)\n","  bpd = -(prior_logp + delta_logp) / np.log(2)\n","  N = np.prod(shape[1:])\n","  bpd = bpd / N + 8.\n","  return z, bpd"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0H1Rq5DTmW8o","colab":{"base_uri":"https://localhost:8080/","height":137,"referenced_widgets":["db075f0871564f5da3119833dcffbf17","1f4487629d4646459e9923bea2461cf3","d1b99c321d8b4256bc9c4267fbafa224","dded254d850e4f86a778aa73439ebc48","488efe83bb0c4675a8f7f6c88b2796d6","4c463140b56245d98996048fd4c78b22","42bd42a903de4d3f8c7f741fc99695d5","32c4f6132fca4c6797b317db5bd35938","9fe9af58fc544fce975120a09e8cc329","b41078ed64a24f68a69f821fc32791ad","7d060cf0423f48d09b5ad434e8254ec2"]},"executionInfo":{"status":"ok","timestamp":1611567034402,"user_tz":480,"elapsed":19423,"user":{"displayName":"Yang S","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjF44W9osq0JQWNtBIaQj5sc_bSQAfgliIyi3wg=s64","userId":"02849572875158190775"}},"outputId":"a9124334-e077-4ede-8e0a-588685e7ea00"},"source":["#@title Compute likelihood on the dataset (double click to expand or collapse)\n","\n","batch_size = 32 #@param {'type':'integer'}\n","\n","dataset = MNIST('.', train=False, transform=transforms.ToTensor(), download=True)\n","data_loader = DataLoader(dataset, batch_size=batch_size, shuffle=True, num_workers=4)\n","\n","ckpt = torch.load('ckpt.pth', map_location=device)\n","score_model.load_state_dict(ckpt)\n","\n","all_bpds = 0.\n","all_items = 0\n","try:\n","  tqdm_data = tqdm.notebook.tqdm(data_loader)\n","  for x, _ in tqdm_data:\n","    x = x.to(device)\n","    # uniform dequantization\n","    x = (x * 255. + torch.rand_like(x)) / 256.    \n","    _, bpd = ode_likelihood(x, score_model, marginal_prob_std_fn,\n","                            diffusion_coeff_fn,\n","                            x.shape[0], device=device, eps=1e-5)\n","    all_bpds += bpd.sum()\n","    all_items += bpd.shape[0]\n","    tqdm_data.set_description(\"Average bits/dim: {:5f}\".format(all_bpds / all_items))\n","\n","except KeyboardInterrupt:\n","  # Remove the error message when interuptted by keyboard or GUI.\n","  pass\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["HBox(children=(HTML(value=''), FloatProgress(value=0.0, max=313.0), HTML(value='')))"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"db075f0871564f5da3119833dcffbf17"}},"metadata":{"tags":[]}},{"output_type":"stream","text":["/atlas/u/yangsong/usr/miniconda3/lib/python3.7/site-packages/ipykernel_launcher.py:28: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","/atlas/u/yangsong/usr/miniconda3/lib/python3.7/site-packages/ipykernel_launcher.py:15: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  from ipykernel import kernelapp as app\n"],"name":"stderr"},{"output_type":"stream","text":["\n"],"name":"stdout"}]},{"cell_type":"markdown","source":["##score-based generative model 三大核心\n","- 以多个不同练级的噪声对数据进行扰动，并且训练一个分数网络来估计不同噪声下的分数\n","- U-net 预测分数\n","- 将朗之万动力学应用到采样以提高生成的质量\n","\n","DDPM和score-based 可以融合到基于分数的SDE中，采样方法整合到PC采样"],"metadata":{"id":"cJkfNVKuEHYh"}},{"cell_type":"markdown","metadata":{"id":"mHsx75Yft-6u"},"source":["## Further Resources\n","\n","If you're interested in learning more about score-based generative models, the following papers would be a good start:\n","\n","* Yang Song, Jascha Sohl-Dickstein, Diederik P. Kingma, Abhishek Kumar, Stefano Ermon, and Ben Poole. \"[Score-Based Generative Modeling through Stochastic Differential Equations.](https://arxiv.org/pdf/2011.13456.pdf)\" International Conference on Learning Representations, 2021.\n","* Jonathan Ho, Ajay Jain, and Pieter Abbeel. \"[Denoising diffusion probabilistic models.](https://arxiv.org/pdf/2006.11239.pdf)\" Advances in Neural Information Processing Systems. 2020.\n","*    Yang Song, and Stefano Ermon. \"[Improved Techniques for Training Score-Based Generative Models.](https://arxiv.org/pdf/2006.09011.pdf)\" Advances in Neural Information Processing Systems. 2020.\n","*   Yang Song, and Stefano Ermon. \"[Generative modeling by estimating gradients of the data distribution.](https://arxiv.org/pdf/1907.05600.pdf)\" Advances in Neural Information Processing Systems. 2019.\n","\n"]}]}